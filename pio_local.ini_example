; example custom platformio.ini file for EMS-ESP

[common]
; custom build flags
; options are: EMSESP_DEBUG, EMSESP_UART_DEBUG, EMSESP_DEBUG_SENSOR, EMSESP_WIFI_TWEAK, EMSESP_DEFAULT_BOARD_PROFILE
; my_build_flags = -DEMSESP_DEBUG -DEMSESP_DEFAULT_BOARD_PROFILE=\"NODEMCU\"
; my_build_flags = -DEMSESP_DEBUG_SENSOR
; my_build_flags = -DEMSESP_DEBUG -DEMSESP_USE_SERIAL
; my_build_flags = -DEMSESP_DEBUG -DCORE_DEBUG_LEVEL=5 ; 5=verbose, 4=debug, 3=info

[env:esp32_4M]
; if using OTA enter your details below
;  upload_protocol = espota
;  upload_flags = 
;    --port=8266
;    --auth=ems-esp-neo
;  upload_port = ems-esp.local
; for USB use
upload_port = /dev/ttyUSB*
; upload_port = COM3

extra_scripts =
  ; pre:scripts/build_interface.py ; comment out if you don't want to re-build the WebUI each time
  scripts/rename_fw.py

[env:esp32_16M]
upload_port = /dev/ttyUSB*
; upload_port = COM3

extra_scripts =
  ; pre:scripts/build_interface.py ; comment out if you don't want to re-build the WebUI each time
  scripts/rename_fw.py

; pio run -e debug
; or from Visual Studio Code do PIO -> Project Tasks -> debug -> General -> Upload and Monitor
; options for debugging are: EMSESP_DEBUG EMSESP_UART_DEBUG EMSESP_DEBUG_SENSOR
[env:debug]
board = esp32dev
platform = espressif32
board_build.partitions = esp32_partition_debug.csv
upload_protocol = esptool
build_type = debug
monitor_filters = esp32_exception_decoder
debug_tool = esp-prog
debug_init_break = tbreak setup
build_flags = ${factory_settings.build_flags} -DONEWIRE_CRC16=0 -DNO_GLOBAL_ARDUINOOTA -DARDUINOJSON_ENABLE_STD_STRING=1 -DESP32=1 -DARDUINO_ARCH_ESP32=1
extra_scripts = pre:scripts/build_interface.py
